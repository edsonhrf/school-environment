{"version":3,"names":["BORDER_WIDTH","RadioButtonAndroid","disabled","onPress","theme","value","status","testID","rest","current","borderAnim","React","useRef","Animated","Value","radioAnim","isFirstRendering","scale","animation","useEffect","setValue","timing","toValue","duration","useNativeDriver","start","context","checked","isChecked","contextValue","rippleColor","selectionControlColor","getAndroidSelectionControlColor","customColor","color","customUncheckedColor","uncheckedColor","undefined","handlePress","onValueChange","styles","container","radio","borderColor","borderWidth","StyleSheet","absoluteFill","radioContainer","dot","backgroundColor","transform","displayName","create","borderRadius","alignItems","justifyContent","height","width","margin","withInternalTheme","RadioButtonAndroidWithTheme"],"sources":["RadioButtonAndroid.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Animated, StyleSheet, View } from 'react-native';\n\nimport { withInternalTheme } from '../../core/theming';\nimport type { $RemoveChildren, InternalTheme } from '../../types';\nimport { getAndroidSelectionControlColor } from '../Checkbox/utils';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { RadioButtonContext, RadioButtonContextType } from './RadioButtonGroup';\nimport { handlePress, isChecked } from './utils';\n\nexport type Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Value of the radio button\n   */\n  value: string;\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked';\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (param?: any) => void;\n  /**\n   * Custom color for unchecked radio.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for radio.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: InternalTheme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\nconst BORDER_WIDTH = 2;\n\n/**\n * Radio buttons allow the selection a single option from a set.\n * This component follows platform guidelines for Android, but can be used\n * on any platform.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/radio-enabled.android.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/radio-disabled.android.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nconst RadioButtonAndroid = ({\n  disabled,\n  onPress,\n  theme,\n  value,\n  status,\n  testID,\n  ...rest\n}: Props) => {\n  const { current: borderAnim } = React.useRef<Animated.Value>(\n    new Animated.Value(BORDER_WIDTH)\n  );\n\n  const { current: radioAnim } = React.useRef<Animated.Value>(\n    new Animated.Value(1)\n  );\n\n  const isFirstRendering = React.useRef<boolean>(true);\n\n  const { scale } = theme.animation;\n\n  React.useEffect(() => {\n    // Do not run animation on very first rendering\n    if (isFirstRendering.current) {\n      isFirstRendering.current = false;\n      return;\n    }\n\n    if (status === 'checked') {\n      radioAnim.setValue(1.2);\n\n      Animated.timing(radioAnim, {\n        toValue: 1,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    } else {\n      borderAnim.setValue(10);\n\n      Animated.timing(borderAnim, {\n        toValue: BORDER_WIDTH,\n        duration: 150 * scale,\n        useNativeDriver: false,\n      }).start();\n    }\n  }, [status, borderAnim, radioAnim, scale]);\n\n  return (\n    <RadioButtonContext.Consumer>\n      {(context?: RadioButtonContextType) => {\n        const checked =\n          isChecked({\n            contextValue: context?.value,\n            status,\n            value,\n          }) === 'checked';\n\n        const { rippleColor, selectionControlColor } =\n          getAndroidSelectionControlColor({\n            theme,\n            disabled,\n            checked,\n            customColor: rest.color,\n            customUncheckedColor: rest.uncheckedColor,\n          });\n\n        return (\n          <TouchableRipple\n            {...rest}\n            borderless\n            rippleColor={rippleColor}\n            onPress={\n              disabled\n                ? undefined\n                : () => {\n                    handlePress({\n                      onPress,\n                      onValueChange: context?.onValueChange,\n                      value,\n                    });\n                  }\n            }\n            accessibilityRole=\"radio\"\n            accessibilityState={{ disabled, checked }}\n            accessibilityLiveRegion=\"polite\"\n            style={styles.container}\n            testID={testID}\n          >\n            <Animated.View\n              style={[\n                styles.radio,\n                {\n                  borderColor: selectionControlColor,\n                  borderWidth: borderAnim,\n                },\n              ]}\n            >\n              {checked ? (\n                <View style={[StyleSheet.absoluteFill, styles.radioContainer]}>\n                  <Animated.View\n                    style={[\n                      styles.dot,\n                      {\n                        backgroundColor: selectionControlColor,\n                        transform: [{ scale: radioAnim }],\n                      },\n                    ]}\n                  />\n                </View>\n              ) : null}\n            </Animated.View>\n          </TouchableRipple>\n        );\n      }}\n    </RadioButtonContext.Consumer>\n  );\n};\n\nRadioButtonAndroid.displayName = 'RadioButton.Android';\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n  },\n  radioContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  radio: {\n    height: 20,\n    width: 20,\n    borderRadius: 10,\n    margin: 8,\n  },\n  dot: {\n    height: 10,\n    width: 10,\n    borderRadius: 5,\n  },\n});\n\nexport default withInternalTheme(RadioButtonAndroid);\n\n// @component-docs ignore-next-line\nconst RadioButtonAndroidWithTheme = withInternalTheme(RadioButtonAndroid);\n// @component-docs ignore-next-line\nexport { RadioButtonAndroidWithTheme as RadioButtonAndroid };\n"],"mappings":";;;;;;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAiD;AAAA;AAAA;AAAA;AAqCjD,MAAMA,YAAY,GAAG,CAAC;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,kBAAkB,GAAG,QAQd;EAAA,IARe;IAC1BC,QAAQ;IACRC,OAAO;IACPC,KAAK;IACLC,KAAK;IACLC,MAAM;IACNC,MAAM;IACN,GAAGC;EACE,CAAC;EACN,MAAM;IAAEC,OAAO,EAAEC;EAAW,CAAC,GAAGC,KAAK,CAACC,MAAM,CAC1C,IAAIC,qBAAQ,CAACC,KAAK,CAACd,YAAY,CAAC,CACjC;EAED,MAAM;IAAES,OAAO,EAAEM;EAAU,CAAC,GAAGJ,KAAK,CAACC,MAAM,CACzC,IAAIC,qBAAQ,CAACC,KAAK,CAAC,CAAC,CAAC,CACtB;EAED,MAAME,gBAAgB,GAAGL,KAAK,CAACC,MAAM,CAAU,IAAI,CAAC;EAEpD,MAAM;IAAEK;EAAM,CAAC,GAAGb,KAAK,CAACc,SAAS;EAEjCP,KAAK,CAACQ,SAAS,CAAC,MAAM;IACpB;IACA,IAAIH,gBAAgB,CAACP,OAAO,EAAE;MAC5BO,gBAAgB,CAACP,OAAO,GAAG,KAAK;MAChC;IACF;IAEA,IAAIH,MAAM,KAAK,SAAS,EAAE;MACxBS,SAAS,CAACK,QAAQ,CAAC,GAAG,CAAC;MAEvBP,qBAAQ,CAACQ,MAAM,CAACN,SAAS,EAAE;QACzBO,OAAO,EAAE,CAAC;QACVC,QAAQ,EAAE,GAAG,GAAGN,KAAK;QACrBO,eAAe,EAAE;MACnB,CAAC,CAAC,CAACC,KAAK,EAAE;IACZ,CAAC,MAAM;MACLf,UAAU,CAACU,QAAQ,CAAC,EAAE,CAAC;MAEvBP,qBAAQ,CAACQ,MAAM,CAACX,UAAU,EAAE;QAC1BY,OAAO,EAAEtB,YAAY;QACrBuB,QAAQ,EAAE,GAAG,GAAGN,KAAK;QACrBO,eAAe,EAAE;MACnB,CAAC,CAAC,CAACC,KAAK,EAAE;IACZ;EACF,CAAC,EAAE,CAACnB,MAAM,EAAEI,UAAU,EAAEK,SAAS,EAAEE,KAAK,CAAC,CAAC;EAE1C,oBACE,oBAAC,oCAAkB,CAAC,QAAQ,QACxBS,OAAgC,IAAK;IACrC,MAAMC,OAAO,GACX,IAAAC,iBAAS,EAAC;MACRC,YAAY,EAAEH,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAErB,KAAK;MAC5BC,MAAM;MACND;IACF,CAAC,CAAC,KAAK,SAAS;IAElB,MAAM;MAAEyB,WAAW;MAAEC;IAAsB,CAAC,GAC1C,IAAAC,sCAA+B,EAAC;MAC9B5B,KAAK;MACLF,QAAQ;MACRyB,OAAO;MACPM,WAAW,EAAEzB,IAAI,CAAC0B,KAAK;MACvBC,oBAAoB,EAAE3B,IAAI,CAAC4B;IAC7B,CAAC,CAAC;IAEJ,oBACE,oBAAC,wBAAe,eACV5B,IAAI;MACR,UAAU;MACV,WAAW,EAAEsB,WAAY;MACzB,OAAO,EACL5B,QAAQ,GACJmC,SAAS,GACT,MAAM;QACJ,IAAAC,mBAAW,EAAC;UACVnC,OAAO;UACPoC,aAAa,EAAEb,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEa,aAAa;UACrClC;QACF,CAAC,CAAC;MACJ,CACL;MACD,iBAAiB,EAAC,OAAO;MACzB,kBAAkB,EAAE;QAAEH,QAAQ;QAAEyB;MAAQ,CAAE;MAC1C,uBAAuB,EAAC,QAAQ;MAChC,KAAK,EAAEa,MAAM,CAACC,SAAU;MACxB,MAAM,EAAElC;IAAO,iBAEf,oBAAC,qBAAQ,CAAC,IAAI;MACZ,KAAK,EAAE,CACLiC,MAAM,CAACE,KAAK,EACZ;QACEC,WAAW,EAAEZ,qBAAqB;QAClCa,WAAW,EAAElC;MACf,CAAC;IACD,GAEDiB,OAAO,gBACN,oBAAC,iBAAI;MAAC,KAAK,EAAE,CAACkB,uBAAU,CAACC,YAAY,EAAEN,MAAM,CAACO,cAAc;IAAE,gBAC5D,oBAAC,qBAAQ,CAAC,IAAI;MACZ,KAAK,EAAE,CACLP,MAAM,CAACQ,GAAG,EACV;QACEC,eAAe,EAAElB,qBAAqB;QACtCmB,SAAS,EAAE,CAAC;UAAEjC,KAAK,EAAEF;QAAU,CAAC;MAClC,CAAC;IACD,EACF,CACG,GACL,IAAI,CACM,CACA;EAEtB,CAAC,CAC2B;AAElC,CAAC;AAEDd,kBAAkB,CAACkD,WAAW,GAAG,qBAAqB;AAEtD,MAAMX,MAAM,GAAGK,uBAAU,CAACO,MAAM,CAAC;EAC/BX,SAAS,EAAE;IACTY,YAAY,EAAE;EAChB,CAAC;EACDN,cAAc,EAAE;IACdO,UAAU,EAAE,QAAQ;IACpBC,cAAc,EAAE;EAClB,CAAC;EACDb,KAAK,EAAE;IACLc,MAAM,EAAE,EAAE;IACVC,KAAK,EAAE,EAAE;IACTJ,YAAY,EAAE,EAAE;IAChBK,MAAM,EAAE;EACV,CAAC;EACDV,GAAG,EAAE;IACHQ,MAAM,EAAE,EAAE;IACVC,KAAK,EAAE,EAAE;IACTJ,YAAY,EAAE;EAChB;AACF,CAAC,CAAC;AAAC,eAEY,IAAAM,0BAAiB,EAAC1D,kBAAkB,CAAC,EAEpD;AAAA;AACA,MAAM2D,2BAA2B,GAAG,IAAAD,0BAAiB,EAAC1D,kBAAkB,CAAC;AACzE;AAAA"}