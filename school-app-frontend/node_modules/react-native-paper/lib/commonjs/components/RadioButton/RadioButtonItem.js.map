{"version":3,"names":["RadioButtonItem","value","label","style","labelStyle","onPress","disabled","color","uncheckedColor","status","theme","accessibilityLabel","testID","mode","position","labelVariant","radioButtonProps","isLeading","radioButton","textColor","isV3","colors","onSurface","text","disabledTextColor","onSurfaceDisabled","textAlign","computedStyle","context","checked","isChecked","contextValue","handlePress","onValueChange","styles","container","font","displayName","withInternalTheme","RadioButtonItemWithTheme","StyleSheet","create","flexDirection","alignItems","justifyContent","paddingVertical","paddingHorizontal","flexShrink","flexGrow","fontSize"],"sources":["RadioButtonItem.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport { withInternalTheme } from '../../core/theming';\nimport type { InternalTheme, MD3TypescaleKey } from '../../types';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\nimport RadioButton from './RadioButton';\nimport RadioButtonAndroid from './RadioButtonAndroid';\nimport { RadioButtonContext, RadioButtonContextType } from './RadioButtonGroup';\nimport RadioButtonIOS from './RadioButtonIOS';\nimport { handlePress, isChecked } from './utils';\n\nexport type Props = {\n  /**\n   * Value of the radio button.\n   */\n  value: string;\n  /**\n   * Label to be displayed on the item.\n   */\n  label: string;\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Accessibility label for the touchable. This is read by the screen reader when the user taps the touchable.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Custom color for unchecked radio.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for radio.\n   */\n  color?: string;\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked';\n  /**\n   * Additional styles for container View.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @supported Available in v5.x with theme version 3\n   *\n   * Label text variant defines appropriate text styles for type role and its size.\n   * Available variants:\n   *\n   *  Display: `displayLarge`, `displayMedium`, `displaySmall`\n   *\n   *  Headline: `headlineLarge`, `headlineMedium`, `headlineSmall`\n   *\n   *  Title: `titleLarge`, `titleMedium`, `titleSmall`\n   *\n   *  Label:  `labelLarge`, `labelMedium`, `labelSmall`\n   *\n   *  Body: `bodyLarge`, `bodyMedium`, `bodySmall`\n   */\n  labelVariant?: keyof typeof MD3TypescaleKey;\n  /**\n   * @optional\n   */\n  theme: InternalTheme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n  /**\n   * Whether `<RadioButton.Android />` or `<RadioButton.IOS />` should be used.\n   * Left undefined `<RadioButton />` will be used.\n   */\n  mode?: 'android' | 'ios';\n  /**\n   * Radio button control position.\n   */\n  position?: 'leading' | 'trailing';\n};\n\n/**\n * RadioButton.Item allows you to press the whole row (item) instead of only the RadioButton.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/radio-item.ios.png\" />\n *     <figcaption>Pressed</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { RadioButton } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [value, setValue] = React.useState('first');\n *\n *   return (\n *     <RadioButton.Group onValueChange={value => setValue(value)} value={value}>\n *       <RadioButton.Item label=\"First item\" value=\"first\" />\n *       <RadioButton.Item label=\"Second item\" value=\"second\" />\n *     </RadioButton.Group>\n *   );\n * };\n *\n * export default MyComponent;\n *```\n */\nconst RadioButtonItem = ({\n  value,\n  label,\n  style,\n  labelStyle,\n  onPress,\n  disabled,\n  color,\n  uncheckedColor,\n  status,\n  theme,\n  accessibilityLabel = label,\n  testID,\n  mode,\n  position = 'trailing',\n  labelVariant = 'bodyLarge',\n}: Props) => {\n  const radioButtonProps = { value, disabled, status, color, uncheckedColor };\n  const isLeading = position === 'leading';\n  let radioButton: any;\n\n  if (mode === 'android') {\n    radioButton = <RadioButtonAndroid {...radioButtonProps} />;\n  } else if (mode === 'ios') {\n    radioButton = <RadioButtonIOS {...radioButtonProps} />;\n  } else {\n    radioButton = <RadioButton {...radioButtonProps} />;\n  }\n\n  const textColor = theme.isV3 ? theme.colors.onSurface : theme.colors.text;\n  const disabledTextColor = theme.isV3\n    ? theme.colors.onSurfaceDisabled\n    : theme.colors.disabled;\n  const textAlign = isLeading ? 'right' : 'left';\n\n  const computedStyle = {\n    color: disabled ? disabledTextColor : textColor,\n    textAlign,\n  } as TextStyle;\n\n  return (\n    <RadioButtonContext.Consumer>\n      {(context?: RadioButtonContextType) => {\n        const checked =\n          isChecked({\n            contextValue: context?.value,\n            status,\n            value,\n          }) === 'checked';\n        return (\n          <TouchableRipple\n            onPress={() =>\n              handlePress({\n                onPress: onPress,\n                onValueChange: context?.onValueChange,\n                value,\n              })\n            }\n            accessibilityLabel={accessibilityLabel}\n            accessibilityRole=\"radio\"\n            accessibilityState={{\n              checked,\n              disabled,\n            }}\n            testID={testID}\n            disabled={disabled}\n          >\n            <View style={[styles.container, style]} pointerEvents=\"none\">\n              {isLeading && radioButton}\n              <Text\n                variant={labelVariant}\n                style={[\n                  styles.label,\n                  !theme.isV3 && styles.font,\n                  computedStyle,\n                  labelStyle,\n                ]}\n              >\n                {label}\n              </Text>\n              {!isLeading && radioButton}\n            </View>\n          </TouchableRipple>\n        );\n      }}\n    </RadioButtonContext.Consumer>\n  );\n};\n\nRadioButtonItem.displayName = 'RadioButton.Item';\n\nexport default withInternalTheme(RadioButtonItem);\n\n// @component-docs ignore-next-line\nconst RadioButtonItemWithTheme = withInternalTheme(RadioButtonItem);\n// @component-docs ignore-next-line\nexport { RadioButtonItemWithTheme as RadioButtonItem };\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n  },\n  label: {\n    flexShrink: 1,\n    flexGrow: 1,\n  },\n  font: {\n    fontSize: 16,\n  },\n});\n"],"mappings":"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"}