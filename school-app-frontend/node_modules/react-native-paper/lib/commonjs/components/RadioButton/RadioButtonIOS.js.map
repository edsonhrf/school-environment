{"version":3,"names":["RadioButtonIOS","disabled","onPress","theme","status","value","testID","rest","context","checked","isChecked","contextValue","checkedColor","rippleColor","getSelectionControlIOSColor","customColor","color","undefined","handlePress","onValueChange","styles","container","opacity","displayName","StyleSheet","create","borderRadius","padding","withInternalTheme","RadioButtonIOSWithTheme"],"sources":["RadioButtonIOS.tsx"],"sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\n\nimport { withInternalTheme } from '../../core/theming';\nimport type { $RemoveChildren, InternalTheme } from '../../types';\nimport { getSelectionControlIOSColor } from '../Checkbox/utils';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { RadioButtonContext, RadioButtonContextType } from './RadioButtonGroup';\nimport { handlePress, isChecked } from './utils';\n\nexport type Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Value of the radio button\n   */\n  value: string;\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked';\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for radio.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: InternalTheme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n/**\n * Radio buttons allow the selection a single option from a set.\n * This component follows platform guidelines for iOS, but can be used\n * on any platform.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/radio-enabled.ios.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/radio-disabled.ios.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nconst RadioButtonIOS = ({\n  disabled,\n  onPress,\n  theme,\n  status,\n  value,\n  testID,\n  ...rest\n}: Props) => {\n  return (\n    <RadioButtonContext.Consumer>\n      {(context?: RadioButtonContextType) => {\n        const checked =\n          isChecked({\n            contextValue: context?.value,\n            status,\n            value,\n          }) === 'checked';\n\n        const { checkedColor, rippleColor } = getSelectionControlIOSColor({\n          theme,\n          disabled,\n          customColor: rest.color,\n        });\n\n        return (\n          <TouchableRipple\n            {...rest}\n            borderless\n            rippleColor={rippleColor}\n            onPress={\n              disabled\n                ? undefined\n                : () => {\n                    handlePress({\n                      onPress,\n                      value,\n                      onValueChange: context?.onValueChange,\n                    });\n                  }\n            }\n            accessibilityRole=\"radio\"\n            accessibilityState={{ disabled, checked }}\n            accessibilityLiveRegion=\"polite\"\n            style={styles.container}\n            testID={testID}\n          >\n            <View style={{ opacity: checked ? 1 : 0 }}>\n              <MaterialCommunityIcon\n                allowFontScaling={false}\n                name=\"check\"\n                size={24}\n                color={checkedColor}\n                direction=\"ltr\"\n              />\n            </View>\n          </TouchableRipple>\n        );\n      }}\n    </RadioButtonContext.Consumer>\n  );\n};\n\nRadioButtonIOS.displayName = 'RadioButton.IOS';\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6,\n  },\n});\n\nexport default withInternalTheme(RadioButtonIOS);\n\n// @component-docs ignore-next-line\nconst RadioButtonIOSWithTheme = withInternalTheme(RadioButtonIOS);\n// @component-docs ignore-next-line\nexport { RadioButtonIOSWithTheme as RadioButtonIOS };\n"],"mappings":";;;;;;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAiD;AAAA;AAAA;AAAA;AAiCjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,cAAc,GAAG,QAQV;EAAA,IARW;IACtBC,QAAQ;IACRC,OAAO;IACPC,KAAK;IACLC,MAAM;IACNC,KAAK;IACLC,MAAM;IACN,GAAGC;EACE,CAAC;EACN,oBACE,oBAAC,oCAAkB,CAAC,QAAQ,QACxBC,OAAgC,IAAK;IACrC,MAAMC,OAAO,GACX,IAAAC,iBAAS,EAAC;MACRC,YAAY,EAAEH,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEH,KAAK;MAC5BD,MAAM;MACNC;IACF,CAAC,CAAC,KAAK,SAAS;IAElB,MAAM;MAAEO,YAAY;MAAEC;IAAY,CAAC,GAAG,IAAAC,kCAA2B,EAAC;MAChEX,KAAK;MACLF,QAAQ;MACRc,WAAW,EAAER,IAAI,CAACS;IACpB,CAAC,CAAC;IAEF,oBACE,oBAAC,wBAAe,eACVT,IAAI;MACR,UAAU;MACV,WAAW,EAAEM,WAAY;MACzB,OAAO,EACLZ,QAAQ,GACJgB,SAAS,GACT,MAAM;QACJ,IAAAC,mBAAW,EAAC;UACVhB,OAAO;UACPG,KAAK;UACLc,aAAa,EAAEX,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEW;QAC1B,CAAC,CAAC;MACJ,CACL;MACD,iBAAiB,EAAC,OAAO;MACzB,kBAAkB,EAAE;QAAElB,QAAQ;QAAEQ;MAAQ,CAAE;MAC1C,uBAAuB,EAAC,QAAQ;MAChC,KAAK,EAAEW,MAAM,CAACC,SAAU;MACxB,MAAM,EAAEf;IAAO,iBAEf,oBAAC,iBAAI;MAAC,KAAK,EAAE;QAAEgB,OAAO,EAAEb,OAAO,GAAG,CAAC,GAAG;MAAE;IAAE,gBACxC,oBAAC,8BAAqB;MACpB,gBAAgB,EAAE,KAAM;MACxB,IAAI,EAAC,OAAO;MACZ,IAAI,EAAE,EAAG;MACT,KAAK,EAAEG,YAAa;MACpB,SAAS,EAAC;IAAK,EACf,CACG,CACS;EAEtB,CAAC,CAC2B;AAElC,CAAC;AAEDZ,cAAc,CAACuB,WAAW,GAAG,iBAAiB;AAE9C,MAAMH,MAAM,GAAGI,uBAAU,CAACC,MAAM,CAAC;EAC/BJ,SAAS,EAAE;IACTK,YAAY,EAAE,EAAE;IAChBC,OAAO,EAAE;EACX;AACF,CAAC,CAAC;AAAC,eAEY,IAAAC,0BAAiB,EAAC5B,cAAc,CAAC,EAEhD;AAAA;AACA,MAAM6B,uBAAuB,GAAG,IAAAD,0BAAiB,EAAC5B,cAAc,CAAC;AACjE;AAAA"}