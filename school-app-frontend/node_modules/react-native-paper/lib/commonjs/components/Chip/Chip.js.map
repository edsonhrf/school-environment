{"version":3,"names":["Chip","mode","children","icon","avatar","selected","disabled","accessibilityLabel","closeIconAccessibilityLabel","onPress","onLongPress","onClose","closeIcon","textStyle","style","theme","testID","selectedColor","showSelectedOverlay","ellipsizeMode","compact","elevated","rest","isV3","current","elevation","React","useRef","Animated","Value","isOutlined","handlePressIn","scale","animation","timing","toValue","duration","useNativeDriver","start","handlePressOut","opacity","defaultBorderRadius","iconSize","backgroundColor","customBackgroundColor","borderRadius","StyleSheet","flatten","borderColor","textColor","iconColor","underlayColor","selectedBackgroundColor","getChipColors","accessibilityState","elevationStyle","Platform","OS","multiplier","labelSpacings","marginRight","marginLeft","contentSpacings","paddingRight","labelTextStyle","color","fonts","labelLarge","regular","styles","container","md3OutlineContainer","md3FlatContainer","touchable","content","md3Content","avatarWrapper","md3AvatarWrapper","isValidElement","cloneElement","props","md3Icon","avatarSelected","md3SelectedIcon","white","colors","primary","md3LabelText","labelText","closeButtonStyle","md3CloseIcon","create","borderWidth","hairlineWidth","borderStyle","flexDirection","select","default","web","alignItems","paddingLeft","position","flexGrow","padding","alignSelf","minHeight","lineHeight","textAlignVertical","marginVertical","width","height","top","left","right","justifyContent","withInternalTheme"],"sources":["Chip.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  AccessibilityState,\n  Animated,\n  Platform,\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport { withInternalTheme } from '../../core/theming';\nimport { white } from '../../styles/themes/v2/colors';\nimport type { EllipsizeProp, InternalTheme } from '../../types';\nimport type { IconSource } from '../Icon';\nimport Icon from '../Icon';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport Surface from '../Surface';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\nimport { getChipColors } from './helpers';\n\nexport type Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Mode of the chip.\n   * - `flat` - flat chip without outline.\n   * - `outlined` - chip with an outline.\n   */\n  mode?: 'flat' | 'outlined';\n  /**\n   * Text content of the `Chip`.\n   */\n  children: React.ReactNode;\n  /**\n   * Icon to display for the `Chip`. Both icon and avatar cannot be specified.\n   */\n  icon?: IconSource;\n  /**\n   * Avatar to display for the `Chip`. Both icon and avatar cannot be specified.\n   */\n  avatar?: React.ReactNode;\n  /**\n   * Icon to display as the close button for the `Chip`. The icon appears only when the onClose prop is specified.\n   */\n  closeIcon?: IconSource;\n  /**\n   * Whether chip is selected.\n   */\n  selected?: boolean;\n  /**\n   * Whether to style the chip color as selected.\n   */\n  selectedColor?: string;\n  /**\n   * @supported Available in v5.x with theme version 3\n   * Whether to display overlay on selected chip\n   */\n  showSelectedOverlay?: boolean;\n  /**\n   * Whether the chip is disabled. A disabled chip is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the chip. This is read by the screen reader when the user taps the chip.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Accessibility label for the close icon. This is read by the screen reader when the user taps the close icon.\n   */\n  closeIconAccessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * @supported Available in v5.x with theme version 3\n   * Sets smaller horizontal paddings `12dp` around label, when there is only label.\n   */\n  compact?: boolean;\n  /**\n   * @supported Available in v5.x with theme version 3\n   * Whether chip should have the elevation.\n   */\n  elevated?: boolean;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Function to execute on close button press. The close button appears only when this prop is specified.\n   */\n  onClose?: () => void;\n  /**\n   * Style of chip's text\n   */\n  textStyle?: StyleProp<TextStyle>;\n  style?: StyleProp<ViewStyle>;\n\n  /**\n   * @optional\n   */\n  theme: InternalTheme;\n  /**\n   * Pass down testID from chip props to touchable for Detox tests.\n   */\n  testID?: string;\n  /**\n   * Ellipsize Mode for the children text\n   */\n  ellipsizeMode?: EllipsizeProp;\n};\n\n/**\n * Chips can be used to display entities in small blocks.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/chip-1.png\" />\n *     <figcaption>Flat chip</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/chip-2.png\" />\n *     <figcaption>Outlined chip</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Chip } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Chip icon=\"information\" onPress={() => console.log('Pressed')}>Example Chip</Chip>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Chip = ({\n  mode = 'flat',\n  children,\n  icon,\n  avatar,\n  selected = false,\n  disabled = false,\n  accessibilityLabel,\n  closeIconAccessibilityLabel = 'Close',\n  onPress,\n  onLongPress,\n  onClose,\n  closeIcon,\n  textStyle,\n  style,\n  theme,\n  testID,\n  selectedColor,\n  showSelectedOverlay = false,\n  ellipsizeMode,\n  compact,\n  elevated = false,\n  ...rest\n}: Props) => {\n  const { isV3 } = theme;\n\n  const { current: elevation } = React.useRef<Animated.Value>(\n    new Animated.Value(isV3 && elevated ? 1 : 0)\n  );\n\n  const isOutlined = mode === 'outlined';\n\n  const handlePressIn = () => {\n    const { scale } = theme.animation;\n    Animated.timing(elevation, {\n      toValue: isV3 ? (elevated ? 2 : 0) : 4,\n      duration: 200 * scale,\n      useNativeDriver: true,\n    }).start();\n  };\n\n  const handlePressOut = () => {\n    const { scale } = theme.animation;\n    Animated.timing(elevation, {\n      toValue: isV3 && elevated ? 1 : 0,\n      duration: 150 * scale,\n      useNativeDriver: true,\n    }).start();\n  };\n\n  const opacity = isV3 ? 0.38 : 0.26;\n  const defaultBorderRadius = isV3 ? 8 : 16;\n  const iconSize = isV3 ? 18 : 16;\n\n  const {\n    backgroundColor: customBackgroundColor,\n    borderRadius = defaultBorderRadius,\n  } = (StyleSheet.flatten(style) || {}) as ViewStyle;\n\n  const {\n    borderColor,\n    textColor,\n    iconColor,\n    underlayColor,\n    selectedBackgroundColor,\n    backgroundColor,\n  } = getChipColors({\n    isOutlined,\n    theme,\n    selectedColor,\n    showSelectedOverlay,\n    customBackgroundColor,\n    disabled,\n  });\n\n  const accessibilityState: AccessibilityState = {\n    selected,\n    disabled,\n  };\n\n  const elevationStyle = isV3 || Platform.OS === 'android' ? elevation : 0;\n  const multiplier = isV3 ? (compact ? 1.5 : 2) : 1;\n  const labelSpacings = {\n    marginRight: onClose ? 0 : 8 * multiplier,\n    marginLeft: avatar || icon || selected ? 4 * multiplier : 8 * multiplier,\n  };\n  const contentSpacings = {\n    paddingRight: isV3 ? (onClose ? 34 : 0) : onClose ? 32 : 4,\n  };\n  const labelTextStyle = {\n    color: textColor,\n    ...(isV3 ? theme.fonts.labelLarge : theme.fonts.regular),\n  };\n  return (\n    <Surface\n      style={\n        [\n          styles.container,\n          isV3 &&\n            (isOutlined ? styles.md3OutlineContainer : styles.md3FlatContainer),\n          !theme.isV3 && {\n            elevation: elevationStyle,\n          },\n          {\n            backgroundColor: selected\n              ? selectedBackgroundColor\n              : backgroundColor,\n            borderColor,\n            borderRadius,\n          },\n          style,\n        ] as StyleProp<ViewStyle>\n      }\n      {...(theme.isV3 && { elevation: elevationStyle })}\n      {...rest}\n    >\n      <TouchableRipple\n        borderless\n        style={[{ borderRadius }, styles.touchable]}\n        onPress={onPress}\n        onLongPress={onLongPress}\n        onPressIn={handlePressIn}\n        onPressOut={handlePressOut}\n        underlayColor={underlayColor}\n        disabled={disabled}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityRole=\"button\"\n        accessibilityState={accessibilityState}\n        testID={testID}\n      >\n        <View\n          style={[styles.content, isV3 && styles.md3Content, contentSpacings]}\n        >\n          {avatar && !icon ? (\n            <View\n              style={[\n                styles.avatarWrapper,\n                isV3 && styles.md3AvatarWrapper,\n                disabled && { opacity },\n              ]}\n            >\n              {React.isValidElement(avatar)\n                ? React.cloneElement(avatar as React.ReactElement<any>, {\n                    style: [styles.avatar, avatar.props.style],\n                  })\n                : avatar}\n            </View>\n          ) : null}\n          {icon || selected ? (\n            <View\n              style={[\n                styles.icon,\n                isV3 && styles.md3Icon,\n                avatar\n                  ? [\n                      styles.avatar,\n                      styles.avatarSelected,\n                      isV3 && selected && styles.md3SelectedIcon,\n                    ]\n                  : null,\n              ]}\n            >\n              {icon ? (\n                <Icon\n                  source={icon}\n                  color={\n                    avatar\n                      ? white\n                      : !disabled && theme.isV3\n                      ? theme.colors.primary\n                      : iconColor\n                  }\n                  size={18}\n                />\n              ) : (\n                <MaterialCommunityIcon\n                  name=\"check\"\n                  color={avatar ? white : iconColor}\n                  size={18}\n                  direction=\"ltr\"\n                />\n              )}\n            </View>\n          ) : null}\n          <Text\n            variant=\"labelLarge\"\n            selectable={false}\n            numberOfLines={1}\n            style={[\n              isV3 ? styles.md3LabelText : styles.labelText,\n              labelTextStyle,\n              labelSpacings,\n              textStyle,\n            ]}\n            ellipsizeMode={ellipsizeMode}\n          >\n            {children}\n          </Text>\n        </View>\n      </TouchableRipple>\n      {onClose ? (\n        <View style={styles.closeButtonStyle}>\n          <TouchableWithoutFeedback\n            onPress={onClose}\n            accessibilityRole=\"button\"\n            accessibilityLabel={closeIconAccessibilityLabel}\n          >\n            <View\n              style={[\n                styles.icon,\n                styles.closeIcon,\n                isV3 && styles.md3CloseIcon,\n              ]}\n            >\n              {closeIcon ? (\n                <Icon source={closeIcon} color={iconColor} size={iconSize} />\n              ) : (\n                <MaterialCommunityIcon\n                  name={isV3 ? 'close' : 'close-circle'}\n                  size={iconSize}\n                  color={iconColor}\n                  direction=\"ltr\"\n                />\n              )}\n            </View>\n          </TouchableWithoutFeedback>\n        </View>\n      ) : null}\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    borderWidth: StyleSheet.hairlineWidth,\n    borderStyle: 'solid',\n    flexDirection: Platform.select({ default: 'column', web: 'row' }),\n  },\n  md3OutlineContainer: {\n    borderWidth: 1,\n  },\n  md3FlatContainer: {\n    borderWidth: 0,\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingLeft: 4,\n    position: 'relative',\n    flexGrow: 1,\n  },\n  md3Content: {\n    paddingLeft: 0,\n  },\n  icon: {\n    padding: 4,\n    alignSelf: 'center',\n  },\n  md3Icon: {\n    paddingLeft: 8,\n    paddingRight: 0,\n  },\n  closeIcon: {\n    marginRight: 4,\n  },\n  md3CloseIcon: {\n    marginRight: 8,\n    padding: 0,\n  },\n  labelText: {\n    minHeight: 24,\n    lineHeight: 24,\n    textAlignVertical: 'center',\n    marginVertical: 4,\n  },\n  md3LabelText: {\n    textAlignVertical: 'center',\n    marginVertical: 6,\n  },\n  avatar: {\n    width: 24,\n    height: 24,\n    borderRadius: 12,\n  },\n  avatarWrapper: {\n    marginRight: 4,\n  },\n  md3AvatarWrapper: {\n    marginLeft: 4,\n    marginRight: 0,\n  },\n  md3SelectedIcon: {\n    paddingLeft: 4,\n  },\n  avatarSelected: {\n    position: 'absolute',\n    top: 4,\n    left: 4,\n    backgroundColor: 'rgba(0, 0, 0, .29)',\n  },\n  closeButtonStyle: {\n    position: 'absolute',\n    right: 0,\n    height: '100%',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  touchable: {\n    flexGrow: 1,\n  },\n});\n\nexport default withInternalTheme(Chip);\n"],"mappings":"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"}