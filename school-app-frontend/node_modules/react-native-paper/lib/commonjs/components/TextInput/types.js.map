{"version":3,"names":[],"sources":["types.tsx"],"sourcesContent":["import type {\n  TextInput as NativeTextInput,\n  Animated,\n  TextStyle,\n  LayoutChangeEvent,\n  ColorValue,\n} from 'react-native';\n\nimport type { $Omit } from './../../types';\nimport type { Props as TextInputProps } from './TextInput';\n\nexport type TextInputLabelProp = string | React.ReactElement;\n\nexport type RenderProps = {\n  ref: (a?: NativeTextInput | null) => void;\n  onChangeText?: (a: string) => void;\n  placeholder?: string;\n  placeholderTextColor?: ColorValue;\n  editable?: boolean;\n  selectionColor?: string;\n  onFocus?: (args: any) => void;\n  onBlur?: (args: any) => void;\n  underlineColorAndroid?: string;\n  style: any;\n  multiline?: boolean;\n  numberOfLines?: number;\n  value?: string;\n  adjustsFontSizeToFit?: boolean;\n  testID?: string;\n};\ntype TextInputTypesWithoutMode = $Omit<TextInputProps, 'mode'>;\nexport type State = {\n  labeled: Animated.Value;\n  error: Animated.Value;\n  focused: boolean;\n  placeholder?: string;\n  value?: string;\n  labelLayout: { measured: boolean; width: number; height: number };\n  leftLayout: { height: number | null; width: number | null };\n  rightLayout: { height: number | null; width: number | null };\n};\nexport type ChildTextInputProps = {\n  parentState: State;\n  innerRef: (ref?: NativeTextInput | null) => void;\n  onFocus?: (args: any) => void;\n  onBlur?: (args: any) => void;\n  forceFocus: () => void;\n  onChangeText?: (value: string) => void;\n  onLayoutAnimatedText: (args: any) => void;\n  onLeftAffixLayoutChange: (event: LayoutChangeEvent) => void;\n  onRightAffixLayoutChange: (event: LayoutChangeEvent) => void;\n} & TextInputTypesWithoutMode;\nexport type LabelProps = {\n  mode?: 'flat' | 'outlined';\n  placeholderStyle: any;\n  placeholderOpacity:\n    | number\n    | Animated.Value\n    | Animated.AnimatedInterpolation<number>;\n  baseLabelTranslateX: number;\n  baseLabelTranslateY: number;\n  wiggleOffsetX: number;\n  labelScale: number;\n  fontSize: number;\n  lineHeight?: number | undefined;\n  fontWeight: TextStyle['fontWeight'];\n  font: any;\n  topPosition: number;\n  paddingOffset?: { paddingLeft: number; paddingRight: number } | null;\n  labelTranslationXOffset?: number;\n  placeholderColor: string | null;\n  backgroundColor?: ColorValue;\n  label?: TextInputLabelProp | null;\n  hasActiveOutline?: boolean | null;\n  activeColor: string;\n  errorColor?: string;\n  error?: boolean | null;\n  onLayoutAnimatedText: (args: any) => void;\n  roundness: number;\n  maxFontSizeMultiplier?: number | undefined | null;\n  testID?: string;\n};\nexport type InputLabelProps = {\n  parentState: State;\n  labelProps: LabelProps;\n  labelBackground?: any;\n  maxFontSizeMultiplier?: number | undefined | null;\n};\n\nexport type LabelBackgroundProps = {\n  labelProps: LabelProps;\n  labelStyle: any;\n  parentState: State;\n  maxFontSizeMultiplier?: number | undefined | null;\n};\n"],"mappings":""}