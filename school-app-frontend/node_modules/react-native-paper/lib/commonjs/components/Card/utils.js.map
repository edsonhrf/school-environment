{"version":3,"names":["getCardCoverStyle","theme","index","total","isV3","roundness","borderRadius","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","undefined","getBorderColor","colors","outline","dark","color","white","alpha","rgb","string","black","getBackgroundColor","isMode","surfaceVariant","surface","getCardColors","mode","modeToCompare","backgroundColor","borderColor"],"sources":["utils.tsx"],"sourcesContent":["import color from 'color';\n\nimport { black, white } from '../../styles/themes/v2/colors';\nimport type { InternalTheme } from '../../types';\n\ntype CardMode = 'elevated' | 'outlined' | 'contained';\n\nexport const getCardCoverStyle = ({\n  theme,\n  index,\n  total,\n}: {\n  theme: InternalTheme;\n  index?: number;\n  total?: number;\n}) => {\n  const { isV3, roundness } = theme;\n\n  if (isV3) {\n    return {\n      borderRadius: 3 * roundness,\n    };\n  }\n\n  if (index === 0) {\n    if (total === 1) {\n      return {\n        borderRadius: roundness,\n      };\n    }\n\n    return {\n      borderTopLeftRadius: roundness,\n      borderTopRightRadius: roundness,\n    };\n  }\n\n  if (typeof total === 'number' && index === total - 1) {\n    return {\n      borderBottomLeftRadius: roundness,\n    };\n  }\n\n  return undefined;\n};\n\nconst getBorderColor = ({ theme }: { theme: InternalTheme }) => {\n  if (theme.isV3) {\n    return theme.colors.outline;\n  }\n\n  if (theme.dark) {\n    return color(white).alpha(0.12).rgb().string();\n  }\n  return color(black).alpha(0.12).rgb().string();\n};\n\nconst getBackgroundColor = ({\n  theme,\n  isMode,\n}: {\n  theme: InternalTheme;\n  isMode: (mode: CardMode) => boolean;\n}) => {\n  if (theme.isV3) {\n    if (isMode('contained')) {\n      return theme.colors.surfaceVariant;\n    }\n    return theme.colors.surface;\n  }\n  return undefined;\n};\n\nexport const getCardColors = ({\n  theme,\n  mode,\n}: {\n  theme: InternalTheme;\n  mode: CardMode;\n}) => {\n  const isMode = (modeToCompare: CardMode) => {\n    return mode === modeToCompare;\n  };\n\n  return {\n    backgroundColor: getBackgroundColor({\n      theme,\n      isMode,\n    }),\n    borderColor: getBorderColor({ theme }),\n  };\n};\n"],"mappings":";;;;;;AAAA;AAEA;AAA6D;AAKtD,MAAMA,iBAAiB,GAAG,QAQ3B;EAAA,IAR4B;IAChCC,KAAK;IACLC,KAAK;IACLC;EAKF,CAAC;EACC,MAAM;IAAEC,IAAI;IAAEC;EAAU,CAAC,GAAGJ,KAAK;EAEjC,IAAIG,IAAI,EAAE;IACR,OAAO;MACLE,YAAY,EAAE,CAAC,GAAGD;IACpB,CAAC;EACH;EAEA,IAAIH,KAAK,KAAK,CAAC,EAAE;IACf,IAAIC,KAAK,KAAK,CAAC,EAAE;MACf,OAAO;QACLG,YAAY,EAAED;MAChB,CAAC;IACH;IAEA,OAAO;MACLE,mBAAmB,EAAEF,SAAS;MAC9BG,oBAAoB,EAAEH;IACxB,CAAC;EACH;EAEA,IAAI,OAAOF,KAAK,KAAK,QAAQ,IAAID,KAAK,KAAKC,KAAK,GAAG,CAAC,EAAE;IACpD,OAAO;MACLM,sBAAsB,EAAEJ;IAC1B,CAAC;EACH;EAEA,OAAOK,SAAS;AAClB,CAAC;AAAC;AAEF,MAAMC,cAAc,GAAG,SAAyC;EAAA,IAAxC;IAAEV;EAAgC,CAAC;EACzD,IAAIA,KAAK,CAACG,IAAI,EAAE;IACd,OAAOH,KAAK,CAACW,MAAM,CAACC,OAAO;EAC7B;EAEA,IAAIZ,KAAK,CAACa,IAAI,EAAE;IACd,OAAO,IAAAC,cAAK,EAACC,aAAK,CAAC,CAACC,KAAK,CAAC,IAAI,CAAC,CAACC,GAAG,EAAE,CAACC,MAAM,EAAE;EAChD;EACA,OAAO,IAAAJ,cAAK,EAACK,aAAK,CAAC,CAACH,KAAK,CAAC,IAAI,CAAC,CAACC,GAAG,EAAE,CAACC,MAAM,EAAE;AAChD,CAAC;AAED,MAAME,kBAAkB,GAAG,SAMrB;EAAA,IANsB;IAC1BpB,KAAK;IACLqB;EAIF,CAAC;EACC,IAAIrB,KAAK,CAACG,IAAI,EAAE;IACd,IAAIkB,MAAM,CAAC,WAAW,CAAC,EAAE;MACvB,OAAOrB,KAAK,CAACW,MAAM,CAACW,cAAc;IACpC;IACA,OAAOtB,KAAK,CAACW,MAAM,CAACY,OAAO;EAC7B;EACA,OAAOd,SAAS;AAClB,CAAC;AAEM,MAAMe,aAAa,GAAG,SAMvB;EAAA,IANwB;IAC5BxB,KAAK;IACLyB;EAIF,CAAC;EACC,MAAMJ,MAAM,GAAIK,aAAuB,IAAK;IAC1C,OAAOD,IAAI,KAAKC,aAAa;EAC/B,CAAC;EAED,OAAO;IACLC,eAAe,EAAEP,kBAAkB,CAAC;MAClCpB,KAAK;MACLqB;IACF,CAAC,CAAC;IACFO,WAAW,EAAElB,cAAc,CAAC;MAAEV;IAAM,CAAC;EACvC,CAAC;AACH,CAAC;AAAC"}