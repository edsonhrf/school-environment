{"version":3,"names":["Searchbar","React","forwardRef","ref","clearAccessibilityLabel","clearIcon","icon","iconColor","customIconColor","inputStyle","onIconPress","placeholder","searchAccessibilityLabel","elevation","style","theme","value","loading","testID","rest","root","useRef","useImperativeHandle","input","current","focus","clear","setNativeProps","args","isFocused","blur","noop","Error","handleClearPress","onChangeText","colors","roundness","dark","isV3","textColor","onSurface","text","color","alpha","rgb","string","rippleColor","borderRadius","styles","container","size","I18nManager","getConstants","isRTL","fonts","regular","Platform","select","web","outline","primary","loader","StyleSheet","create","flexDirection","alignItems","flex","fontSize","paddingLeft","alignSelf","textAlign","minWidth","margin","withInternalTheme"],"sources":["Searchbar.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  I18nManager,\n  Platform,\n  StyleProp,\n  StyleSheet,\n  TextInput,\n  TextInputProps,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport color from 'color';\n\nimport { withInternalTheme } from '../core/theming';\nimport type { InternalTheme } from '../types';\nimport ActivityIndicator from './ActivityIndicator';\nimport type { IconSource } from './Icon';\nimport IconButton from './IconButton/IconButton';\nimport MaterialCommunityIcon from './MaterialCommunityIcon';\nimport Surface from './Surface';\n\nexport type Props = React.ComponentPropsWithRef<typeof TextInput> & {\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  clearAccessibilityLabel?: string;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  searchAccessibilityLabel?: string;\n  /**\n   * Hint text shown when the input is empty.\n   */\n  placeholder?: string;\n  /**\n   * The value of the text input.\n   */\n  value: string;\n  /**\n   * Icon name for the left icon button (see `onIconPress`).\n   */\n  icon?: IconSource;\n  /**\n   * Callback that is called when the text input's text changes.\n   */\n  onChangeText?: (query: string) => void;\n  /**\n   * Callback to execute if we want the left icon to act as button.\n   */\n  onIconPress?: () => void;\n  /**\n   * @supported Available in v5.x with theme version 3\n   * Changes Searchbar shadow and background on iOS and Android.\n   */\n  elevation?: 0 | 1 | 2 | 3 | 4 | 5 | Animated.Value;\n  /**\n   * Set style of the TextInput component inside the searchbar\n   */\n  inputStyle?: StyleProp<TextStyle>;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Custom color for icon, default will be derived from theme\n   */\n  iconColor?: string;\n  /**\n   * Custom icon for clear button, default will be icon close\n   */\n  clearIcon?: IconSource;\n  /**\n   * @supported Available in v5.x\n   * Custom flag for replacing clear button with activity indicator.\n   */\n  loading?: Boolean;\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string;\n  /**\n   * @optional\n   */\n  theme: InternalTheme;\n};\n\ntype TextInputHandles = Pick<\n  TextInput,\n  'setNativeProps' | 'isFocused' | 'clear' | 'blur' | 'focus'\n>;\n\n/**\n * Searchbar is a simple input box where users can type search queries.\n *\n * <div class=\"screenshots\">\n *   <img class=\"small\" src=\"screenshots/searchbar.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Searchbar } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [searchQuery, setSearchQuery] = React.useState('');\n *\n *   const onChangeSearch = query => setSearchQuery(query);\n *\n *   return (\n *     <Searchbar\n *       placeholder=\"Search\"\n *       onChangeText={onChangeSearch}\n *       value={searchQuery}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n\n * ```\n */\nconst Searchbar = React.forwardRef<TextInputHandles, Props>(\n  (\n    {\n      clearAccessibilityLabel = 'clear',\n      clearIcon,\n      icon,\n      iconColor: customIconColor,\n      inputStyle,\n      onIconPress,\n      placeholder,\n      searchAccessibilityLabel = 'search',\n      elevation = 1,\n      style,\n      theme,\n      value,\n      loading = false,\n      testID = 'search-bar',\n      ...rest\n    }: Props,\n    ref\n  ) => {\n    const root = React.useRef<TextInput>(null);\n\n    React.useImperativeHandle(ref, () => {\n      const input = root.current;\n\n      if (input) {\n        return {\n          focus: () => input.focus(),\n          clear: () => input.clear(),\n          setNativeProps: (args: TextInputProps) => input.setNativeProps(args),\n          isFocused: () => input.isFocused(),\n          blur: () => input.blur(),\n        };\n      }\n\n      const noop = () => {\n        throw new Error('TextInput is not available');\n      };\n\n      return {\n        focus: noop,\n        clear: noop,\n        setNativeProps: noop,\n        isFocused: noop,\n        blur: noop,\n      };\n    });\n\n    const handleClearPress = () => {\n      root.current?.clear();\n      rest.onChangeText?.('');\n    };\n\n    const { colors, roundness, dark, isV3 } = theme;\n    const textColor = isV3 ? theme.colors.onSurface : theme.colors.text;\n    const iconColor =\n      customIconColor ||\n      (dark ? textColor : color(textColor).alpha(0.54).rgb().string());\n    const rippleColor = color(textColor).alpha(0.32).rgb().string();\n\n    return (\n      <Surface\n        style={[\n          { borderRadius: roundness },\n          !isV3 && styles.elevation,\n          styles.container,\n          style,\n        ]}\n        {...(theme.isV3 && { elevation })}\n      >\n        <IconButton\n          accessibilityRole=\"button\"\n          borderless\n          rippleColor={rippleColor}\n          onPress={onIconPress}\n          iconColor={iconColor}\n          icon={\n            icon ||\n            (({ size, color }) => (\n              <MaterialCommunityIcon\n                name=\"magnify\"\n                color={color}\n                size={size}\n                direction={I18nManager.getConstants().isRTL ? 'rtl' : 'ltr'}\n              />\n            ))\n          }\n          accessibilityLabel={searchAccessibilityLabel}\n        />\n        <TextInput\n          style={[\n            styles.input,\n            {\n              color: textColor,\n              ...(!isV3 && theme.fonts.regular),\n              ...Platform.select({ web: { outline: 'none' } }),\n            },\n            inputStyle,\n          ]}\n          placeholder={placeholder || ''}\n          placeholderTextColor={\n            theme.isV3 ? theme.colors.onSurface : theme.colors?.placeholder\n          }\n          selectionColor={colors?.primary}\n          underlineColorAndroid=\"transparent\"\n          returnKeyType=\"search\"\n          keyboardAppearance={dark ? 'dark' : 'light'}\n          accessibilityRole=\"search\"\n          ref={root}\n          value={value}\n          testID={testID}\n          {...rest}\n        />\n        {loading ? (\n          <ActivityIndicator\n            testID=\"activity-indicator\"\n            style={styles.loader}\n          />\n        ) : (\n          // Clear icon should be always rendered within Searchbar â€“ it's transparent,\n          // without touch events, when there is no value. It's done to avoid issues\n          // with the abruptly stopping ripple effect and changing bar width on web,\n          // when clearing the value.\n          <View\n            pointerEvents={value ? 'auto' : 'none'}\n            testID={`${testID}-icon-wrapper`}\n          >\n            <IconButton\n              borderless\n              accessibilityLabel={clearAccessibilityLabel}\n              iconColor={value ? iconColor : 'rgba(255, 255, 255, 0)'}\n              rippleColor={rippleColor}\n              onPress={handleClearPress}\n              icon={\n                clearIcon ||\n                (({ size, color }) => (\n                  <MaterialCommunityIcon\n                    name=\"close\"\n                    color={color}\n                    size={size}\n                    direction={I18nManager.getConstants().isRTL ? 'rtl' : 'ltr'}\n                  />\n                ))\n              }\n              accessibilityRole=\"button\"\n            />\n          </View>\n        )}\n      </Surface>\n    );\n  }\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  input: {\n    flex: 1,\n    fontSize: 18,\n    paddingLeft: 8,\n    alignSelf: 'stretch',\n    textAlign: I18nManager.getConstants().isRTL ? 'right' : 'left',\n    minWidth: 0,\n  },\n  elevation: {\n    elevation: 4,\n  },\n  loader: {\n    margin: 10,\n  },\n});\n\nexport default withInternalTheme(Searchbar);\n"],"mappings":"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"}