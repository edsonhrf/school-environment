{"version":3,"names":["SKIP","Symbol","module","exports","rewire","babel","options","t","types","name","index","mappings","require","visitor","ImportDeclaration","path","node","source","value","replaceWithMultiple","specifiers","reduce","declarations","specifier","mapping","imported","alias","identifier","local","s","importDefaultSpecifier","importNamespaceSpecifier","importSpecifier","push","importDeclaration","stringLiteral","previous","find","d","requeue"],"sources":["index.js"],"sourcesContent":["const SKIP = Symbol('SKIP');\n\nmodule.exports = function rewire(babel, options) {\n  const t = babel.types;\n\n  const { name, index, mappings } = require(options.mappings ||\n    '../../mappings.json');\n\n  return {\n    visitor: {\n      ImportDeclaration(path) {\n        if (path.node.source.value !== name || path.node[SKIP]) {\n          return;\n        }\n\n        path.node.source.value = `${name}/${index}`;\n        path.replaceWithMultiple(\n          path.node.specifiers.reduce((declarations, specifier) => {\n            const mapping = mappings[specifier.imported.name];\n\n            if (mapping) {\n              const alias = `${name}/${mapping.path}`;\n              const identifier = t.identifier(specifier.local.name);\n\n              let s;\n\n              switch (mapping.name) {\n                case 'default':\n                  s = t.importDefaultSpecifier(identifier);\n                  break;\n                case '*':\n                  s = t.importNamespaceSpecifier(identifier);\n                  break;\n                default:\n                  s = t.importSpecifier(identifier, t.identifier(mapping.name));\n              }\n\n              declarations.push(\n                t.importDeclaration([s], t.stringLiteral(alias))\n              );\n            } else {\n              const previous = declarations.find(\n                (d) => d.source.value === path.node.source.value\n              );\n\n              if (previous) {\n                previous.specifiers.push(specifier);\n              } else {\n                const node = t.importDeclaration([specifier], path.node.source);\n                node[SKIP] = true;\n                declarations.push(node);\n              }\n            }\n\n            return declarations;\n          }, [])\n        );\n\n        path.requeue();\n      },\n    },\n  };\n};\n"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,MAAM,CAAC,MAAM,CAAC;AAE3BC,MAAM,CAACC,OAAO,GAAG,SAASC,MAAM,CAACC,KAAK,EAAEC,OAAO,EAAE;EAC/C,MAAMC,CAAC,GAAGF,KAAK,CAACG,KAAK;EAErB,MAAM;IAAEC,IAAI;IAAEC,KAAK;IAAEC;EAAS,CAAC,GAAGC,OAAO,CAACN,OAAO,CAACK,QAAQ,IACxD,qBAAqB,CAAC;EAExB,OAAO;IACLE,OAAO,EAAE;MACPC,iBAAiB,CAACC,IAAI,EAAE;QACtB,IAAIA,IAAI,CAACC,IAAI,CAACC,MAAM,CAACC,KAAK,KAAKT,IAAI,IAAIM,IAAI,CAACC,IAAI,CAAChB,IAAI,CAAC,EAAE;UACtD;QACF;QAEAe,IAAI,CAACC,IAAI,CAACC,MAAM,CAACC,KAAK,GAAI,GAAET,IAAK,IAAGC,KAAM,EAAC;QAC3CK,IAAI,CAACI,mBAAmB,CACtBJ,IAAI,CAACC,IAAI,CAACI,UAAU,CAACC,MAAM,CAAC,CAACC,YAAY,EAAEC,SAAS,KAAK;UACvD,MAAMC,OAAO,GAAGb,QAAQ,CAACY,SAAS,CAACE,QAAQ,CAAChB,IAAI,CAAC;UAEjD,IAAIe,OAAO,EAAE;YACX,MAAME,KAAK,GAAI,GAAEjB,IAAK,IAAGe,OAAO,CAACT,IAAK,EAAC;YACvC,MAAMY,UAAU,GAAGpB,CAAC,CAACoB,UAAU,CAACJ,SAAS,CAACK,KAAK,CAACnB,IAAI,CAAC;YAErD,IAAIoB,CAAC;YAEL,QAAQL,OAAO,CAACf,IAAI;cAClB,KAAK,SAAS;gBACZoB,CAAC,GAAGtB,CAAC,CAACuB,sBAAsB,CAACH,UAAU,CAAC;gBACxC;cACF,KAAK,GAAG;gBACNE,CAAC,GAAGtB,CAAC,CAACwB,wBAAwB,CAACJ,UAAU,CAAC;gBAC1C;cACF;gBACEE,CAAC,GAAGtB,CAAC,CAACyB,eAAe,CAACL,UAAU,EAAEpB,CAAC,CAACoB,UAAU,CAACH,OAAO,CAACf,IAAI,CAAC,CAAC;YAAC;YAGlEa,YAAY,CAACW,IAAI,CACf1B,CAAC,CAAC2B,iBAAiB,CAAC,CAACL,CAAC,CAAC,EAAEtB,CAAC,CAAC4B,aAAa,CAACT,KAAK,CAAC,CAAC,CACjD;UACH,CAAC,MAAM;YACL,MAAMU,QAAQ,GAAGd,YAAY,CAACe,IAAI,CAC/BC,CAAC,IAAKA,CAAC,CAACrB,MAAM,CAACC,KAAK,KAAKH,IAAI,CAACC,IAAI,CAACC,MAAM,CAACC,KAAK,CACjD;YAED,IAAIkB,QAAQ,EAAE;cACZA,QAAQ,CAAChB,UAAU,CAACa,IAAI,CAACV,SAAS,CAAC;YACrC,CAAC,MAAM;cACL,MAAMP,IAAI,GAAGT,CAAC,CAAC2B,iBAAiB,CAAC,CAACX,SAAS,CAAC,EAAER,IAAI,CAACC,IAAI,CAACC,MAAM,CAAC;cAC/DD,IAAI,CAAChB,IAAI,CAAC,GAAG,IAAI;cACjBsB,YAAY,CAACW,IAAI,CAACjB,IAAI,CAAC;YACzB;UACF;UAEA,OAAOM,YAAY;QACrB,CAAC,EAAE,EAAE,CAAC,CACP;QAEDP,IAAI,CAACwB,OAAO,EAAE;MAChB;IACF;EACF,CAAC;AACH,CAAC"}