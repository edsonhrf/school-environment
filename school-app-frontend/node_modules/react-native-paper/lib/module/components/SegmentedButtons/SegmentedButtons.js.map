{"version":3,"names":["React","StyleSheet","View","useTheme","SegmentedButtonItem","getDisabledSegmentedButtonStyle","SegmentedButtons","value","onValueChange","buttons","multiSelect","density","style","theme","styles","row","map","item","i","disabledChildStyle","index","segment","length","undefined","checked","Array","isArray","includes","onPress","e","nextValue","filter","val","create","flexDirection"],"sources":["SegmentedButtons.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  GestureResponderEvent,\n  StyleProp,\n  StyleSheet,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport { useTheme } from '../../core/theming';\nimport type { IconSource } from '../Icon';\nimport SegmentedButtonItem from './SegmentedButtonItem';\nimport { getDisabledSegmentedButtonStyle } from './utils';\n\ntype ConditionalValue =\n  | {\n      /**\n       * Array of the currently selected segmented button values.\n       */\n      value: string[];\n      /**\n       * Support multiple selected options.\n       */\n      multiSelect: true;\n      /**\n       * Function to execute on selection change\n       */\n      onValueChange: (value: string[]) => void;\n    }\n  | {\n      /**\n       * Value of the currently selected segmented button.\n       */\n      value: string;\n      /**\n       * Support multiple selected options.\n       */\n      multiSelect?: false;\n      /**\n       * Function to execute on selection change\n       */\n      onValueChange: (value: string) => void;\n    };\n\nexport type Props = {\n  /**\n   * Buttons to display as options in toggle button.\n   * Button should contain the following properties:\n   * - `value`: value of button (required)\n   * - `icon`: icon to display for the item\n   * - `disabled`: whether the button is disabled\n   * - `accessibilityLabel`: acccessibility label for the button. This is read by the screen reader when the user taps the button.\n   * - `onPress`: callback that is called when button is pressed\n   * - `label`: label text of the button\n   * - `showSelectedCheck`: show optional check icon to indicate selected state\n   * - `style`: pass additional styles for the button\n   * - `testID`: testID to be used on tests\n   */\n  buttons: {\n    value: string;\n    icon?: IconSource;\n    disabled?: boolean;\n    accessibilityLabel?: string;\n    onPress?: (event: GestureResponderEvent) => void;\n    label?: string;\n    showSelectedCheck?: boolean;\n    style?: StyleProp<ViewStyle>;\n    testID?: string;\n  }[];\n  /**\n   * Density is applied to the height, to allow usage in denser UIs\n   */\n  density?: 'regular' | 'small' | 'medium' | 'high';\n  style?: StyleProp<ViewStyle>;\n} & ConditionalValue;\n\n/**\n * @supported Available in v5.x\n * Segmented buttons can be used to select options, switch views or sort elements.</br>\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/segmented-button.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { SegmentedButtons } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [value, setValue] = React.useState('');\n *\n *   return (\n *     <SegmentedButtons\n *      value={value}\n *      onValueChange={setValue}\n *      buttons={[\n *        {\n *          value: 'walk',\n *          label: 'Walking',\n *        },\n *        {\n *          value: 'train',\n *          label: 'Transit',\n *        },\n *      ]}\n *      style={styles.group}\n *    />\n *   );\n * };\n *\n * export default MyComponent;\n *```\n */\nconst SegmentedButtons = ({\n  value,\n  onValueChange,\n  buttons,\n  multiSelect,\n  density,\n  style,\n}: Props) => {\n  const theme = useTheme();\n  return (\n    <View style={[styles.row, style]}>\n      {buttons.map((item, i) => {\n        const disabledChildStyle = getDisabledSegmentedButtonStyle({\n          theme,\n          buttons,\n          index: i,\n        });\n        const segment =\n          i === 0 ? 'first' : i === buttons.length - 1 ? 'last' : undefined;\n\n        const checked =\n          multiSelect && Array.isArray(value)\n            ? value.includes(item.value)\n            : value === item.value;\n\n        const onPress = (e: GestureResponderEvent) => {\n          item.onPress?.(e);\n\n          const nextValue =\n            multiSelect && Array.isArray(value)\n              ? checked\n                ? value.filter((val) => item.value !== val)\n                : [...value, item.value]\n              : item.value;\n\n          // @ts-expect-error: TS doesn't preserve types after destructuring, so the type isn't inferred correctly\n          onValueChange(nextValue);\n        };\n\n        return (\n          <SegmentedButtonItem\n            {...item}\n            key={i}\n            checked={checked}\n            segment={segment}\n            density={density}\n            onPress={onPress}\n            style={[item.style, disabledChildStyle]}\n          />\n        );\n      })}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  row: {\n    flexDirection: 'row',\n  },\n});\n\nexport default SegmentedButtons;\n\n// @component-docs ignore-next-line\nexport { SegmentedButtons as SegmentedButtons };\n"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAGEC,UAAU,EACVC,IAAI,QAEC,cAAc;AAErB,SAASC,QAAQ,QAAQ,oBAAoB;AAE7C,OAAOC,mBAAmB,MAAM,uBAAuB;AACvD,SAASC,+BAA+B,QAAQ,SAAS;AAgEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,gBAAgB,GAAG,QAOZ;EAAA,IAPa;IACxBC,KAAK;IACLC,aAAa;IACbC,OAAO;IACPC,WAAW;IACXC,OAAO;IACPC;EACK,CAAC;EACN,MAAMC,KAAK,GAAGV,QAAQ,EAAE;EACxB,oBACE,oBAAC,IAAI;IAAC,KAAK,EAAE,CAACW,MAAM,CAACC,GAAG,EAAEH,KAAK;EAAE,GAC9BH,OAAO,CAACO,GAAG,CAAC,CAACC,IAAI,EAAEC,CAAC,KAAK;IACxB,MAAMC,kBAAkB,GAAGd,+BAA+B,CAAC;MACzDQ,KAAK;MACLJ,OAAO;MACPW,KAAK,EAAEF;IACT,CAAC,CAAC;IACF,MAAMG,OAAO,GACXH,CAAC,KAAK,CAAC,GAAG,OAAO,GAAGA,CAAC,KAAKT,OAAO,CAACa,MAAM,GAAG,CAAC,GAAG,MAAM,GAAGC,SAAS;IAEnE,MAAMC,OAAO,GACXd,WAAW,IAAIe,KAAK,CAACC,OAAO,CAACnB,KAAK,CAAC,GAC/BA,KAAK,CAACoB,QAAQ,CAACV,IAAI,CAACV,KAAK,CAAC,GAC1BA,KAAK,KAAKU,IAAI,CAACV,KAAK;IAE1B,MAAMqB,OAAO,GAAIC,CAAwB,IAAK;MAAA;MAC5C,iBAAAZ,IAAI,CAACW,OAAO,kDAAZ,mBAAAX,IAAI,EAAWY,CAAC,CAAC;MAEjB,MAAMC,SAAS,GACbpB,WAAW,IAAIe,KAAK,CAACC,OAAO,CAACnB,KAAK,CAAC,GAC/BiB,OAAO,GACLjB,KAAK,CAACwB,MAAM,CAAEC,GAAG,IAAKf,IAAI,CAACV,KAAK,KAAKyB,GAAG,CAAC,GACzC,CAAC,GAAGzB,KAAK,EAAEU,IAAI,CAACV,KAAK,CAAC,GACxBU,IAAI,CAACV,KAAK;;MAEhB;MACAC,aAAa,CAACsB,SAAS,CAAC;IAC1B,CAAC;IAED,oBACE,oBAAC,mBAAmB,eACdb,IAAI;MACR,GAAG,EAAEC,CAAE;MACP,OAAO,EAAEM,OAAQ;MACjB,OAAO,EAAEH,OAAQ;MACjB,OAAO,EAAEV,OAAQ;MACjB,OAAO,EAAEiB,OAAQ;MACjB,KAAK,EAAE,CAACX,IAAI,CAACL,KAAK,EAAEO,kBAAkB;IAAE,GACxC;EAEN,CAAC,CAAC,CACG;AAEX,CAAC;AAED,MAAML,MAAM,GAAGb,UAAU,CAACgC,MAAM,CAAC;EAC/BlB,GAAG,EAAE;IACHmB,aAAa,EAAE;EACjB;AACF,CAAC,CAAC;AAEF,eAAe5B,gBAAgB;;AAE/B;AACA,SAASA,gBAAoC"}