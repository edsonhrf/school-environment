{"version":3,"names":["React","StyleSheet","View","withInternalTheme","getSelectionControlIOSColor","MaterialCommunityIcon","TouchableRipple","RadioButtonContext","handlePress","isChecked","RadioButtonIOS","disabled","onPress","theme","status","value","testID","rest","context","checked","contextValue","checkedColor","rippleColor","customColor","color","undefined","onValueChange","styles","container","opacity","displayName","create","borderRadius","padding","RadioButtonIOSWithTheme"],"sources":["RadioButtonIOS.tsx"],"sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\n\nimport { withInternalTheme } from '../../core/theming';\nimport type { $RemoveChildren, InternalTheme } from '../../types';\nimport { getSelectionControlIOSColor } from '../Checkbox/utils';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { RadioButtonContext, RadioButtonContextType } from './RadioButtonGroup';\nimport { handlePress, isChecked } from './utils';\n\nexport type Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Value of the radio button\n   */\n  value: string;\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked';\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for radio.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: InternalTheme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n/**\n * Radio buttons allow the selection a single option from a set.\n * This component follows platform guidelines for iOS, but can be used\n * on any platform.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/radio-enabled.ios.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/radio-disabled.ios.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nconst RadioButtonIOS = ({\n  disabled,\n  onPress,\n  theme,\n  status,\n  value,\n  testID,\n  ...rest\n}: Props) => {\n  return (\n    <RadioButtonContext.Consumer>\n      {(context?: RadioButtonContextType) => {\n        const checked =\n          isChecked({\n            contextValue: context?.value,\n            status,\n            value,\n          }) === 'checked';\n\n        const { checkedColor, rippleColor } = getSelectionControlIOSColor({\n          theme,\n          disabled,\n          customColor: rest.color,\n        });\n\n        return (\n          <TouchableRipple\n            {...rest}\n            borderless\n            rippleColor={rippleColor}\n            onPress={\n              disabled\n                ? undefined\n                : () => {\n                    handlePress({\n                      onPress,\n                      value,\n                      onValueChange: context?.onValueChange,\n                    });\n                  }\n            }\n            accessibilityRole=\"radio\"\n            accessibilityState={{ disabled, checked }}\n            accessibilityLiveRegion=\"polite\"\n            style={styles.container}\n            testID={testID}\n          >\n            <View style={{ opacity: checked ? 1 : 0 }}>\n              <MaterialCommunityIcon\n                allowFontScaling={false}\n                name=\"check\"\n                size={24}\n                color={checkedColor}\n                direction=\"ltr\"\n              />\n            </View>\n          </TouchableRipple>\n        );\n      }}\n    </RadioButtonContext.Consumer>\n  );\n};\n\nRadioButtonIOS.displayName = 'RadioButton.IOS';\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6,\n  },\n});\n\nexport default withInternalTheme(RadioButtonIOS);\n\n// @component-docs ignore-next-line\nconst RadioButtonIOSWithTheme = withInternalTheme(RadioButtonIOS);\n// @component-docs ignore-next-line\nexport { RadioButtonIOSWithTheme as RadioButtonIOS };\n"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,UAAU,EAAEC,IAAI,QAAQ,cAAc;AAE/C,SAASC,iBAAiB,QAAQ,oBAAoB;AAEtD,SAASC,2BAA2B,QAAQ,mBAAmB;AAC/D,OAAOC,qBAAqB,MAAM,0BAA0B;AAC5D,OAAOC,eAAe,MAAM,oCAAoC;AAChE,SAASC,kBAAkB,QAAgC,oBAAoB;AAC/E,SAASC,WAAW,EAAEC,SAAS,QAAQ,SAAS;AAiChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,cAAc,GAAG,QAQV;EAAA,IARW;IACtBC,QAAQ;IACRC,OAAO;IACPC,KAAK;IACLC,MAAM;IACNC,KAAK;IACLC,MAAM;IACN,GAAGC;EACE,CAAC;EACN,oBACE,oBAAC,kBAAkB,CAAC,QAAQ,QACxBC,OAAgC,IAAK;IACrC,MAAMC,OAAO,GACXV,SAAS,CAAC;MACRW,YAAY,EAAEF,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEH,KAAK;MAC5BD,MAAM;MACNC;IACF,CAAC,CAAC,KAAK,SAAS;IAElB,MAAM;MAAEM,YAAY;MAAEC;IAAY,CAAC,GAAGlB,2BAA2B,CAAC;MAChES,KAAK;MACLF,QAAQ;MACRY,WAAW,EAAEN,IAAI,CAACO;IACpB,CAAC,CAAC;IAEF,oBACE,oBAAC,eAAe,eACVP,IAAI;MACR,UAAU;MACV,WAAW,EAAEK,WAAY;MACzB,OAAO,EACLX,QAAQ,GACJc,SAAS,GACT,MAAM;QACJjB,WAAW,CAAC;UACVI,OAAO;UACPG,KAAK;UACLW,aAAa,EAAER,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEQ;QAC1B,CAAC,CAAC;MACJ,CACL;MACD,iBAAiB,EAAC,OAAO;MACzB,kBAAkB,EAAE;QAAEf,QAAQ;QAAEQ;MAAQ,CAAE;MAC1C,uBAAuB,EAAC,QAAQ;MAChC,KAAK,EAAEQ,MAAM,CAACC,SAAU;MACxB,MAAM,EAAEZ;IAAO,iBAEf,oBAAC,IAAI;MAAC,KAAK,EAAE;QAAEa,OAAO,EAAEV,OAAO,GAAG,CAAC,GAAG;MAAE;IAAE,gBACxC,oBAAC,qBAAqB;MACpB,gBAAgB,EAAE,KAAM;MACxB,IAAI,EAAC,OAAO;MACZ,IAAI,EAAE,EAAG;MACT,KAAK,EAAEE,YAAa;MACpB,SAAS,EAAC;IAAK,EACf,CACG,CACS;EAEtB,CAAC,CAC2B;AAElC,CAAC;AAEDX,cAAc,CAACoB,WAAW,GAAG,iBAAiB;AAE9C,MAAMH,MAAM,GAAG1B,UAAU,CAAC8B,MAAM,CAAC;EAC/BH,SAAS,EAAE;IACTI,YAAY,EAAE,EAAE;IAChBC,OAAO,EAAE;EACX;AACF,CAAC,CAAC;AAEF,eAAe9B,iBAAiB,CAACO,cAAc,CAAC;;AAEhD;AACA,MAAMwB,uBAAuB,GAAG/B,iBAAiB,CAACO,cAAc,CAAC;AACjE;AACA,SAASwB,uBAAuB,IAAIxB,cAAc"}