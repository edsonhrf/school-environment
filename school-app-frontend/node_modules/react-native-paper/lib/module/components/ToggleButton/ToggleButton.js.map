{"version":3,"names":["React","StyleSheet","color","withInternalTheme","black","white","IconButton","ToggleButtonGroupContext","getToggleButtonColor","ToggleButton","forwardRef","ref","icon","size","theme","accessibilityLabel","disabled","style","value","status","onPress","rest","borderRadius","roundness","context","checked","backgroundColor","borderColor","isV3","colors","outline","dark","alpha","rgb","string","e","onValueChange","selected","styles","content","create","width","height","margin","ToggleButtonWithTheme"],"sources":["ToggleButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  GestureResponderEvent,\n  StyleProp,\n  StyleSheet,\n  ViewStyle,\n  View,\n} from 'react-native';\n\nimport color from 'color';\n\nimport { withInternalTheme } from '../../core/theming';\nimport { black, white } from '../../styles/themes/v2/colors';\nimport type { InternalTheme } from '../../types';\nimport type { IconSource } from '../Icon';\nimport IconButton from '../IconButton/IconButton';\nimport { ToggleButtonGroupContext } from './ToggleButtonGroup';\nimport { getToggleButtonColor } from './utils';\n\nexport type Props = {\n  /**\n   * Icon to display for the `ToggleButton`.\n   */\n  icon: IconSource;\n  /**\n   * Size of the icon.\n   */\n  size?: number;\n  /**\n   * Custom text color for button.\n   */\n  color?: string;\n  /**\n   * Whether the button is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the `ToggleButton`. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (value?: GestureResponderEvent | string) => void;\n  /**\n   * Value of button.\n   */\n  value?: string;\n  /**\n   * Status of button.\n   */\n  status?: 'checked' | 'unchecked';\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: InternalTheme;\n  ref?: React.RefObject<View>;\n};\n\n/**\n * Toggle buttons can be used to group related options. To emphasize groups of related toggle buttons,\n * a group should share a common container.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/toggle-button.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ToggleButton } from 'react-native-paper';\n *\n * const ToggleButtonExample = () => {\n *   const [status, setStatus] = React.useState('checked');\n *\n *   const onButtonToggle = value => {\n *     setStatus(status === 'checked' ? 'unchecked' : 'checked');\n *   };\n *\n *   return (\n *     <ToggleButton\n *       icon=\"bluetooth\"\n *       value=\"bluetooth\"\n *       status={status}\n *       onPress={onButtonToggle}\n *     />\n *   );\n * };\n *\n * export default ToggleButtonExample;\n *\n * ```\n */\nconst ToggleButton = React.forwardRef<View, Props>(\n  (\n    {\n      icon,\n      size,\n      theme,\n      accessibilityLabel,\n      disabled,\n      style,\n      value,\n      status,\n      onPress,\n      ...rest\n    }: Props,\n    ref\n  ) => {\n    const borderRadius = theme.roundness;\n\n    return (\n      <ToggleButtonGroupContext.Consumer>\n        {(\n          context: { value: string | null; onValueChange: Function } | null\n        ) => {\n          const checked: boolean | null =\n            (context && context.value === value) || status === 'checked';\n\n          const backgroundColor = getToggleButtonColor({ theme, checked });\n          const borderColor = theme.isV3\n            ? theme.colors.outline\n            : color(theme.dark ? white : black)\n                .alpha(0.29)\n                .rgb()\n                .string();\n\n          return (\n            <IconButton\n              borderless={false}\n              icon={icon}\n              onPress={(e?: GestureResponderEvent | string) => {\n                if (onPress) {\n                  onPress(e);\n                }\n\n                if (context) {\n                  context.onValueChange(!checked ? value : null);\n                }\n              }}\n              size={size}\n              accessibilityLabel={accessibilityLabel}\n              accessibilityState={{ disabled, selected: checked }}\n              disabled={disabled}\n              style={[\n                styles.content,\n                {\n                  backgroundColor,\n                  borderRadius,\n                  borderColor,\n                },\n                style,\n              ]}\n              ref={ref}\n              {...rest}\n            />\n          );\n        }}\n      </ToggleButtonGroupContext.Consumer>\n    );\n  }\n);\n\nconst styles = StyleSheet.create({\n  content: {\n    width: 42,\n    height: 42,\n    margin: 0,\n  },\n});\n\nexport default withInternalTheme(ToggleButton);\n\n// @component-docs ignore-next-line\nconst ToggleButtonWithTheme = withInternalTheme(ToggleButton);\n// @component-docs ignore-next-line\nexport { ToggleButtonWithTheme as ToggleButton };\n"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAGEC,UAAU,QAGL,cAAc;AAErB,OAAOC,KAAK,MAAM,OAAO;AAEzB,SAASC,iBAAiB,QAAQ,oBAAoB;AACtD,SAASC,KAAK,EAAEC,KAAK,QAAQ,+BAA+B;AAG5D,OAAOC,UAAU,MAAM,0BAA0B;AACjD,SAASC,wBAAwB,QAAQ,qBAAqB;AAC9D,SAASC,oBAAoB,QAAQ,SAAS;AA2C9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,YAAY,gBAAGT,KAAK,CAACU,UAAU,CACnC,OAaEC,GAAG,KACA;EAAA,IAbH;IACEC,IAAI;IACJC,IAAI;IACJC,KAAK;IACLC,kBAAkB;IAClBC,QAAQ;IACRC,KAAK;IACLC,KAAK;IACLC,MAAM;IACNC,OAAO;IACP,GAAGC;EACE,CAAC;EAGR,MAAMC,YAAY,GAAGR,KAAK,CAACS,SAAS;EAEpC,oBACE,oBAAC,wBAAwB,CAAC,QAAQ,QAE9BC,OAAiE,IAC9D;IACH,MAAMC,OAAuB,GAC1BD,OAAO,IAAIA,OAAO,CAACN,KAAK,KAAKA,KAAK,IAAKC,MAAM,KAAK,SAAS;IAE9D,MAAMO,eAAe,GAAGlB,oBAAoB,CAAC;MAAEM,KAAK;MAAEW;IAAQ,CAAC,CAAC;IAChE,MAAME,WAAW,GAAGb,KAAK,CAACc,IAAI,GAC1Bd,KAAK,CAACe,MAAM,CAACC,OAAO,GACpB5B,KAAK,CAACY,KAAK,CAACiB,IAAI,GAAG1B,KAAK,GAAGD,KAAK,CAAC,CAC9B4B,KAAK,CAAC,IAAI,CAAC,CACXC,GAAG,EAAE,CACLC,MAAM,EAAE;IAEf,oBACE,oBAAC,UAAU;MACT,UAAU,EAAE,KAAM;MAClB,IAAI,EAAEtB,IAAK;MACX,OAAO,EAAGuB,CAAkC,IAAK;QAC/C,IAAIf,OAAO,EAAE;UACXA,OAAO,CAACe,CAAC,CAAC;QACZ;QAEA,IAAIX,OAAO,EAAE;UACXA,OAAO,CAACY,aAAa,CAAC,CAACX,OAAO,GAAGP,KAAK,GAAG,IAAI,CAAC;QAChD;MACF,CAAE;MACF,IAAI,EAAEL,IAAK;MACX,kBAAkB,EAAEE,kBAAmB;MACvC,kBAAkB,EAAE;QAAEC,QAAQ;QAAEqB,QAAQ,EAAEZ;MAAQ,CAAE;MACpD,QAAQ,EAAET,QAAS;MACnB,KAAK,EAAE,CACLsB,MAAM,CAACC,OAAO,EACd;QACEb,eAAe;QACfJ,YAAY;QACZK;MACF,CAAC,EACDV,KAAK,CACL;MACF,GAAG,EAAEN;IAAI,GACLU,IAAI,EACR;EAEN,CAAC,CACiC;AAExC,CAAC,CACF;AAED,MAAMiB,MAAM,GAAGrC,UAAU,CAACuC,MAAM,CAAC;EAC/BD,OAAO,EAAE;IACPE,KAAK,EAAE,EAAE;IACTC,MAAM,EAAE,EAAE;IACVC,MAAM,EAAE;EACV;AACF,CAAC,CAAC;AAEF,eAAexC,iBAAiB,CAACM,YAAY,CAAC;;AAE9C;AACA,MAAMmC,qBAAqB,GAAGzC,iBAAiB,CAACM,YAAY,CAAC;AAC7D;AACA,SAASmC,qBAAqB,IAAInC,YAAY"}