{"version":3,"names":["React","getConstants","AdornmentSide","AdornmentType","InputMode","TextInputAffix","AffixAdornment","TextInputIcon","IconAdornment","getAdornmentConfig","left","right","adornmentConfig","side","Left","adornment","Right","forEach","isValidElement","type","Affix","Icon","push","getAdornmentStyleAdjustmentForNativeInput","leftAffixWidth","rightAffixWidth","paddingHorizontal","inputOffset","mode","isV3","OUTLINED_INPUT_OFFSET","ADORNMENT_OFFSET","length","adornmentStyleAdjustmentForNativeInput","map","isLeftSide","inputModeAdornemntOffset","Outlined","paddingKey","captalize","affixWidth","padding","offset","isAffix","marginKey","allStyleAdjustmentsMerged","reduce","mergedStyles","currentStyle","text","charAt","toUpperCase","slice","TextInputAdornment","onAffixChange","textStyle","visible","topPosition","isTextInputFocused","forceFocus","maxFontSizeMultiplier","inputAdornmentComponent","commonProps","testID"],"sources":["TextInputAdornment.tsx"],"sourcesContent":["import React from 'react';\nimport type {\n  LayoutChangeEvent,\n  TextStyle,\n  StyleProp,\n  Animated,\n} from 'react-native';\n\nimport { getConstants } from '../helpers';\nimport { AdornmentSide, AdornmentType, InputMode } from './enums';\nimport TextInputAffix, { AffixAdornment } from './TextInputAffix';\nimport TextInputIcon, { IconAdornment } from './TextInputIcon';\nimport type {\n  AdornmentConfig,\n  AdornmentStyleAdjustmentForNativeInput,\n} from './types';\n\nexport function getAdornmentConfig({\n  left,\n  right,\n}: {\n  left?: React.ReactNode;\n  right?: React.ReactNode;\n}): Array<AdornmentConfig> {\n  let adornmentConfig: any[] = [];\n  if (left || right) {\n    [\n      { side: AdornmentSide.Left, adornment: left },\n      { side: AdornmentSide.Right, adornment: right },\n    ].forEach(({ side, adornment }) => {\n      if (adornment && React.isValidElement(adornment)) {\n        let type;\n        if (adornment.type === TextInputAffix) {\n          type = AdornmentType.Affix;\n        } else if (adornment.type === TextInputIcon) {\n          type = AdornmentType.Icon;\n        }\n        adornmentConfig.push({\n          side,\n          type,\n        });\n      }\n    });\n  }\n\n  return adornmentConfig;\n}\n\nexport function getAdornmentStyleAdjustmentForNativeInput({\n  adornmentConfig,\n  leftAffixWidth,\n  rightAffixWidth,\n  paddingHorizontal,\n  inputOffset = 0,\n  mode,\n  isV3,\n}: {\n  inputOffset?: number;\n  adornmentConfig: AdornmentConfig[];\n  leftAffixWidth: number;\n  rightAffixWidth: number;\n  mode?: 'outlined' | 'flat';\n  paddingHorizontal?: number | string;\n  isV3?: boolean;\n}): AdornmentStyleAdjustmentForNativeInput | {} {\n  const { OUTLINED_INPUT_OFFSET, ADORNMENT_OFFSET } = getConstants(isV3);\n\n  if (adornmentConfig.length) {\n    const adornmentStyleAdjustmentForNativeInput = adornmentConfig.map(\n      ({ type, side }: AdornmentConfig) => {\n        const isLeftSide = side === AdornmentSide.Left;\n        const inputModeAdornemntOffset =\n          mode === InputMode.Outlined\n            ? ADORNMENT_OFFSET + OUTLINED_INPUT_OFFSET\n            : ADORNMENT_OFFSET;\n        const paddingKey = `padding${captalize(side)}`;\n        const affixWidth = isLeftSide ? leftAffixWidth : rightAffixWidth;\n        const padding =\n          typeof paddingHorizontal === 'number'\n            ? paddingHorizontal\n            : inputModeAdornemntOffset;\n        const offset = affixWidth + padding;\n\n        const isAffix = type === AdornmentType.Affix;\n        const marginKey = `margin${captalize(side)}`;\n\n        return {\n          [marginKey]: isAffix ? 0 : offset,\n          [paddingKey]: isAffix ? offset : inputOffset,\n        };\n      }\n    );\n    const allStyleAdjustmentsMerged =\n      adornmentStyleAdjustmentForNativeInput.reduce(\n        (mergedStyles, currentStyle) => {\n          return {\n            ...mergedStyles,\n            ...currentStyle,\n          };\n        },\n        {}\n      );\n    return allStyleAdjustmentsMerged;\n  } else {\n    return [{}];\n  }\n}\n\nconst captalize = (text: string) =>\n  text.charAt(0).toUpperCase() + text.slice(1);\n\nexport interface TextInputAdornmentProps {\n  forceFocus: () => void;\n  adornmentConfig: AdornmentConfig[];\n  topPosition: {\n    [AdornmentType.Affix]: {\n      [AdornmentSide.Left]: number | null;\n      [AdornmentSide.Right]: number | null;\n    };\n    [AdornmentType.Icon]: number;\n  };\n  onAffixChange: {\n    [AdornmentSide.Left]: (event: LayoutChangeEvent) => void;\n    [AdornmentSide.Right]: (event: LayoutChangeEvent) => void;\n  };\n  left?: React.ReactNode;\n  right?: React.ReactNode;\n  textStyle?: StyleProp<TextStyle>;\n  visible?: Animated.Value;\n  isTextInputFocused: boolean;\n  paddingHorizontal?: number | string;\n  maxFontSizeMultiplier?: number | undefined | null;\n}\n\nconst TextInputAdornment: React.FunctionComponent<TextInputAdornmentProps> = ({\n  adornmentConfig,\n  left,\n  right,\n  onAffixChange,\n  textStyle,\n  visible,\n  topPosition,\n  isTextInputFocused,\n  forceFocus,\n  paddingHorizontal,\n  maxFontSizeMultiplier,\n}) => {\n  if (adornmentConfig.length) {\n    return (\n      <>\n        {adornmentConfig.map(({ type, side }: AdornmentConfig) => {\n          let inputAdornmentComponent;\n          if (side === AdornmentSide.Left) {\n            inputAdornmentComponent = left;\n          } else if (side === AdornmentSide.Right) {\n            inputAdornmentComponent = right;\n          }\n\n          const commonProps = {\n            side: side,\n            testID: `${side}-${type}-adornment`,\n            isTextInputFocused,\n            paddingHorizontal,\n          };\n          if (type === AdornmentType.Icon) {\n            return (\n              <IconAdornment\n                {...commonProps}\n                key={side}\n                icon={inputAdornmentComponent}\n                topPosition={topPosition[AdornmentType.Icon]}\n                forceFocus={forceFocus}\n              />\n            );\n          } else if (type === AdornmentType.Affix) {\n            return (\n              <AffixAdornment\n                {...commonProps}\n                key={side}\n                topPosition={topPosition[AdornmentType.Affix][side]}\n                affix={inputAdornmentComponent}\n                textStyle={textStyle}\n                onLayout={onAffixChange[side]}\n                visible={visible}\n                maxFontSizeMultiplier={maxFontSizeMultiplier}\n              />\n            );\n          } else {\n            return null;\n          }\n        })}\n      </>\n    );\n  } else {\n    return null;\n  }\n};\n\nexport default TextInputAdornment;\n"],"mappings":"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"}